{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome Daniel's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for GO","text":"<ul> <li>Primary author: Daniel Islas</li> <li>Reviewer: Emily Chen</li> </ul> <p>This tutorial is a walk-through on how you go through setting up a Go development environment using Docker dev containers in VS code. By the end of this guide, you\u2019ll have a fully functional environment to write, compile, and run a \u201cHello COMP423\u201d program in Go without having to install Go on your local machine.</p>"},{"location":"tutorials/go-setup/#1-prerequisites","title":"1. Prerequisites","text":""},{"location":"tutorials/go-setup/#host-machine-setup-only","title":"Host Machine Setup Only","text":"<ul> <li>Install Docker (for containers)</li> <li>Install Visual Studio Code (editing and Dev containers)</li> <li>Install Git (version control)</li> </ul> <p>Note</p> <p>Do not install GO directly on host machine. Host machine should only have Docker, VS Code and Git downloaded. We are going to use a Docker dev container through VS code dev containers</p>"},{"location":"tutorials/go-setup/#2-step-by-step-overview-for-instructions-on-a-new-dev-container-project-for-go","title":"2. Step-by-step overview for instructions on a new Dev Container project for GO","text":"<p>We will:</p> <ol> <li>Create a blank folder (Section 3)</li> <li>Initialize Git in that folder (Section 3)</li> <li>Provide a Dev Container configuration (Section 4)</li> <li>Write and run a simple \u201cHello COMP423\u201d program (Section 5)</li> </ol> <p>This overview helps us see what we are going to do before we go in depth into each step.</p>"},{"location":"tutorials/go-setup/#3-start-from-a-blank-directory-and-git-initialize","title":"3. Start from a Blank Directory and Git Initialize","text":""},{"location":"tutorials/go-setup/#create-a-blank-folder-for-your-new-project","title":"Create a blank folder for your new project:","text":"<p>Open your terminal and set directory to where you want to set up the dev container</p>"},{"location":"tutorials/go-setup/#31-create-new-directory-ex-my-go-docs","title":"3.1 Create new directory (ex: 'my-go-docs'):","text":"<p>Inputing these commands into the terminal will create a new directory</p> <pre><code>mkdir my-go-docs\ncd my-go-docs\n</code></pre>"},{"location":"tutorials/go-setup/#32-initialize-git-in-the-folder","title":"3.2 Initialize Git in the folder","text":"<pre><code>git init \n</code></pre>"},{"location":"tutorials/go-setup/#33-adding-a-readme-file","title":"3.3 Adding a README file","text":"<pre><code>echo \"# Go Dev Container\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README.md file\"\n</code></pre>"},{"location":"tutorials/go-setup/#4-dev-container-configuration","title":"4. Dev Container Configuration","text":""},{"location":"tutorials/go-setup/#create-a-dev-container-and-configure-it-for-your-new-project","title":"Create a Dev container and configure it for your new project:","text":"<p>In your previously initialized directory, set up the dev container configuration by creating a hidden folder named <code>.devcontainer</code>. Inside this folder, add a <code>.json</code> file <code>named devcontainer.json</code>.</p> <p>Dev container configuration path should be as follows: <code>.devcontainer/devcontainer.json</code></p> <p>In this <code>.json</code> file input the following configurations <pre><code>{\n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n    \"features\": {},\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"golang.go\"\n            ]\n        }\n    }\n}\n</code></pre></p>"},{"location":"tutorials/go-setup/#what-does-the-dev-container-do","title":"What does the Dev container do?","text":"<ul> <li>\"name\": Sets the container name in VS Code.</li> <li>\"image\": Uses Microsoft's prebuilt Go development Docker image.</li> <li>\"features\": Adds tools/configurations to the container. Left empty in this tutorial but can include utilities like Docker CLI.</li> <li>\"customizations\": Installs the Go VS Code extension (golang.go) for better support with IntelliSense, formatting, and debugging.</li> </ul> <p>Note</p> <p>We install the Go VS Code extension: \"golang.go\". By using docker image you avoid installing it on your host. Do not install Go locally on your machine. We rely on the Docker dev container.</p>"},{"location":"tutorials/go-setup/#5-steps-to-create-a-new-project-write-a-basic-hello-comp423-program-compile-and-run","title":"5. Steps to Create a New Project, Write a Basic \"Hello COMP423\" Program, Compile, and Run","text":""},{"location":"tutorials/go-setup/#setting-up-dev-container-to-write-new-program","title":"Setting up Dev container to write new program","text":"<p>5.1 Open VS Code and Reopen the folder in Dev container (VS code will detect the <code>.devcontainer/devcontainer.json</code>)</p> <p>Tip</p> <p>To reopen the folder in dev container in VS code input 'Shift + CTRL/COMMAND + P' to open the command pallette and select to Reopen in Dev Container</p> <p>5.2: Verify Your Go Installation <pre><code>go version\n</code></pre> This should return something like: <pre><code>go version go1.20 linux/amd64\n</code></pre></p> <p>Note</p> <p>This confirms Go is installed inside the Docker container and not on your host machine.</p>"},{"location":"tutorials/go-setup/#basic-program-for-go","title":"Basic Program for Go","text":"<p>5.3 Inside the Dev container create a file named <code>main.go</code> in this file input code for Hello COMP423 <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre> 5.4 Initialize Go modules: Create a <code>go.mod</code> file <pre><code>go mod init example.com/my-go-docs\n</code></pre></p>"},{"location":"tutorials/go-setup/#execution","title":"Execution","text":"<p>5.5 Run the program directly  <pre><code>go run main.go\n</code></pre> This should output <pre><code>Hello COMP423\n</code></pre> 5.6 Build an executable  <pre><code>go build main.go\n</code></pre> This creates the file <code>main</code> which can then be run with: <pre><code>./main\n</code></pre></p>"},{"location":"tutorials/go-setup/#final-output","title":"Final Output","text":"<p><code>Hello COMP423</code></p> <p>Info</p> <ul> <li><code>go run</code> is a more simple way to compile and execute at once.</li> <li><code>go build</code> creates a separate file that you can run as many times without needing to recompile it.</li> </ul>"}]}